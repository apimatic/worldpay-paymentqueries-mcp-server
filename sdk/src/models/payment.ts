/**
 * Payment QueriesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import {
  AuthorizationType1,
  authorizationType1Schema,
} from './authorizationType1.js';
import { Issuer, issuerSchema } from './issuer.js';
import { Links2, links2Schema } from './links2.js';
import { Narrative1, narrative1Schema } from './narrative1.js';
import {
  PaymentInstrument,
  paymentInstrumentSchema,
} from './paymentInstrument.js';
import { Scheme, schemeSchema } from './scheme.js';
import {
  TransactionType1,
  transactionType1Schema,
} from './transactionType1.js';
import { Value3, value3Schema } from './value3.js';

export interface Payment {
  /** Payment initial authorization time. */
  timestamp?: string;
  /** A unique reference generated by you, used to identify a payment throughout its lifecycle. */
  transactionReference?: string;
  /** An object that contains identification and further details of the merchant. */
  narrative?: Narrative1;
  /** An object that contains transaction type. */
  transactionType?: TransactionType1;
  /** An object that contains authorization type. */
  authorizationType?: AuthorizationType1;
  /** Merchant entity name. */
  entity?: string;
  /** An object containing information returned by the card scheme. */
  scheme?: Scheme;
  /** An object containing information returned by the issuer. */
  issuer?: Issuer;
  /** The payment instrument supplied in the authorization request. */
  paymentInstrument?: PaymentInstrument;
  /** An object that contains payment amount and currency. */
  value?: Value3;
  /** link to retrieveByPaymentId. */
  links?: Links2;
  additionalProperties?: Record<string, unknown>;
}

export const paymentSchema: Schema<Payment> = typedExpandoObject(
  {
    timestamp: ['timestamp', optional(string())],
    transactionReference: ['transactionReference', optional(string())],
    narrative: ['narrative', optional(lazy(() => narrative1Schema))],
    transactionType: ['transactionType', optional(transactionType1Schema)],
    authorizationType: [
      'authorizationType',
      optional(authorizationType1Schema),
    ],
    entity: ['entity', optional(string())],
    scheme: ['scheme', optional(lazy(() => schemeSchema))],
    issuer: ['issuer', optional(lazy(() => issuerSchema))],
    paymentInstrument: [
      'paymentInstrument',
      optional(lazy(() => paymentInstrumentSchema)),
    ],
    value: ['value', optional(lazy(() => value3Schema))],
    links: ['_links', optional(lazy(() => links2Schema))],
  },
  'additionalProperties',
  optional(unknown())
);
