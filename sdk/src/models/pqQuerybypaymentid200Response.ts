/**
 * Payment QueriesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema.js';
import {
  AuthorizationTypeEnum,
  authorizationTypeEnumSchema,
} from './authorizationTypeEnum.js';
import {
  PqQuerybypaymentid200ResponseEvents,
  pqQuerybypaymentid200ResponseEventsSchema,
} from './containers/pqQuerybypaymentid200ResponseEvents.js';
import { Issuer, issuerSchema } from './issuer.js';
import { LastEventEnum, lastEventEnumSchema } from './lastEventEnum.js';
import { Links, linksSchema } from './links.js';
import { Narrative, narrativeSchema } from './narrative.js';
import {
  PaymentInstrument,
  paymentInstrumentSchema,
} from './paymentInstrument.js';
import { Scheme, schemeSchema } from './scheme.js';
import {
  TransactionTypeEnum,
  transactionTypeEnumSchema,
} from './transactionTypeEnum.js';
import {
  UpdatedPaymentInstrument,
  updatedPaymentInstrumentSchema,
} from './updatedPaymentInstrument.js';
import { Value3, value3Schema } from './value3.js';

export interface PqQuerybypaymentid200Response {
  /** Payment initial authorization time. */
  timestamp?: string;
  /** Unique identifier generated by us for a single payment. Generated at authorization, and maintained through successive payment actions. */
  paymentId?: string;
  /** A unique reference generated by you, used to identify a payment throughout its lifecycle. */
  transactionReference?: string;
  /** The text that appears on your customer's statement. Used to identify the merchant. */
  narrative?: Narrative;
  /** The transaction type of the payment. */
  transactionType?: TransactionTypeEnum;
  /** The authorization type of the payment. */
  authorizationType?: AuthorizationTypeEnum;
  /** Merchant entity name. */
  entity?: string;
  /** The last event received for the payment */
  lastEvent?: LastEventEnum;
  /** An object containing information returned by the card scheme. */
  scheme?: Scheme;
  /** An object containing information returned by the issuer. */
  issuer?: Issuer;
  /** The payment instrument supplied in the authorization request. */
  paymentInstrument?: PaymentInstrument;
  /** The payment instrument supplied in the authorization request. */
  updatedPaymentInstrument?: UpdatedPaymentInstrument;
  /** An object that contains payment amount and currency. */
  value?: Value3;
  /** An array that contains the history of events of a payment. */
  events?: PqQuerybypaymentid200ResponseEvents[];
  /** Self link and next action links. */
  links?: Links;
}

export const pqQuerybypaymentid200ResponseSchema: Schema<PqQuerybypaymentid200Response> = object(
  {
    timestamp: ['timestamp', optional(string())],
    paymentId: ['paymentId', optional(string())],
    transactionReference: ['transactionReference', optional(string())],
    narrative: ['narrative', optional(lazy(() => narrativeSchema))],
    transactionType: ['transactionType', optional(transactionTypeEnumSchema)],
    authorizationType: [
      'authorizationType',
      optional(authorizationTypeEnumSchema),
    ],
    entity: ['entity', optional(string())],
    lastEvent: ['lastEvent', optional(lastEventEnumSchema)],
    scheme: ['scheme', optional(lazy(() => schemeSchema))],
    issuer: ['issuer', optional(lazy(() => issuerSchema))],
    paymentInstrument: [
      'paymentInstrument',
      optional(lazy(() => paymentInstrumentSchema)),
    ],
    updatedPaymentInstrument: [
      'updatedPaymentInstrument',
      optional(lazy(() => updatedPaymentInstrumentSchema)),
    ],
    value: ['value', optional(lazy(() => value3Schema))],
    events: [
      'events',
      optional(array(pqQuerybypaymentid200ResponseEventsSchema)),
    ],
    links: ['_links', optional(lazy(() => linksSchema))],
  }
);
