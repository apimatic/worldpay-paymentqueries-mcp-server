/**
 * Payment QueriesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  AuthorizationFailed,
  authorizationFailedSchema,
} from '../authorizationFailed.js';
import {
  AuthorizationRefused,
  authorizationRefusedSchema,
} from '../authorizationRefused.js';
import {
  AuthorizationRequested,
  authorizationRequestedSchema,
} from '../authorizationRequested.js';
import {
  AuthorizationSucceeded,
  authorizationSucceededSchema,
} from '../authorizationSucceeded.js';
import {
  AuthorizationTimedOut,
  authorizationTimedOutSchema,
} from '../authorizationTimedOut.js';
import {
  CancellationFailed,
  cancellationFailedSchema,
} from '../cancellationFailed.js';
import {
  CancellationRequested,
  cancellationRequestedSchema,
} from '../cancellationRequested.js';
import {
  CancellationRequestSubmitted,
  cancellationRequestSubmittedSchema,
} from '../cancellationRequestSubmitted.js';
import {
  CancellationTimedOut,
  cancellationTimedOutSchema,
} from '../cancellationTimedOut.js';
import { RefundFailed, refundFailedSchema } from '../refundFailed.js';
import { RefundRequested, refundRequestedSchema } from '../refundRequested.js';
import {
  RefundRequestSubmitted,
  refundRequestSubmittedSchema,
} from '../refundRequestSubmitted.js';
import { RefundTimedOut, refundTimedOutSchema } from '../refundTimedOut.js';
import { ReversalFailed, reversalFailedSchema } from '../reversalFailed.js';
import {
  ReversalRequested,
  reversalRequestedSchema,
} from '../reversalRequested.js';
import {
  ReversalRequestSubmitted,
  reversalRequestSubmittedSchema,
} from '../reversalRequestSubmitted.js';
import {
  ReversalTimedOut,
  reversalTimedOutSchema,
} from '../reversalTimedOut.js';
import { SaleFailed, saleFailedSchema } from '../saleFailed.js';
import { SaleRefused, saleRefusedSchema } from '../saleRefused.js';
import { SaleRequested, saleRequestedSchema } from '../saleRequested.js';
import { SaleSucceeded, saleSucceededSchema } from '../saleSucceeded.js';
import { SaleTimedOut, saleTimedOutSchema } from '../saleTimedOut.js';
import {
  SettlementFailed,
  settlementFailedSchema,
} from '../settlementFailed.js';
import {
  SettlementRequested,
  settlementRequestedSchema,
} from '../settlementRequested.js';
import {
  SettlementRequestSubmitted,
  settlementRequestSubmittedSchema,
} from '../settlementRequestSubmitted.js';
import {
  SettlementTimedOut,
  settlementTimedOutSchema,
} from '../settlementTimedOut.js';

/** This is a container type for one-of types. */
export type PqQuerybypaymentid200ResponseEvents =
  | AuthorizationRequested
  | AuthorizationSucceeded
  | AuthorizationRefused
  | AuthorizationFailed
  | AuthorizationTimedOut
  | SaleRequested
  | SaleSucceeded
  | SaleRefused
  | SaleFailed
  | SaleTimedOut
  | SettlementRequested
  | SettlementRequestSubmitted
  | SettlementFailed
  | SettlementTimedOut
  | RefundRequested
  | RefundRequestSubmitted
  | RefundFailed
  | RefundTimedOut
  | CancellationRequested
  | CancellationRequestSubmitted
  | CancellationFailed
  | CancellationTimedOut
  | ReversalRequested
  | ReversalRequestSubmitted
  | ReversalFailed
  | ReversalTimedOut;

export const pqQuerybypaymentid200ResponseEventsSchema: Schema<PqQuerybypaymentid200ResponseEvents> = oneOf(
  [
    authorizationRequestedSchema,
    authorizationSucceededSchema,
    authorizationRefusedSchema,
    authorizationFailedSchema,
    authorizationTimedOutSchema,
    saleRequestedSchema,
    saleSucceededSchema,
    saleRefusedSchema,
    saleFailedSchema,
    saleTimedOutSchema,
    settlementRequestedSchema,
    settlementRequestSubmittedSchema,
    settlementFailedSchema,
    settlementTimedOutSchema,
    refundRequestedSchema,
    refundRequestSubmittedSchema,
    refundFailedSchema,
    refundTimedOutSchema,
    cancellationRequestedSchema,
    cancellationRequestSubmittedSchema,
    cancellationFailedSchema,
    cancellationTimedOutSchema,
    reversalRequestedSchema,
    reversalRequestSubmittedSchema,
    reversalFailedSchema,
    reversalTimedOutSchema,
  ]
);

export namespace PqQuerybypaymentid200ResponseEvents {
  /**
   * Validation method to narrow down union type to AuthorizationRequested type case.
   *
   * This is authorizationRequested case.
   */
  export function isAuthorizationRequested(
    value: unknown
  ): value is AuthorizationRequested {
    return isMappedValueValidForSchema(value, authorizationRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to AuthorizationSucceeded type case.
   *
   * This is authorizationSucceeded case.
   */
  export function isAuthorizationSucceeded(
    value: unknown
  ): value is AuthorizationSucceeded {
    return isMappedValueValidForSchema(value, authorizationSucceededSchema);
  }

  /**
   * Validation method to narrow down union type to AuthorizationRefused type case.
   *
   * This is authorizationRefused case.
   */
  export function isAuthorizationRefused(
    value: unknown
  ): value is AuthorizationRefused {
    return isMappedValueValidForSchema(value, authorizationRefusedSchema);
  }

  /**
   * Validation method to narrow down union type to AuthorizationFailed type case.
   *
   * This is authorizationFailed case.
   */
  export function isAuthorizationFailed(
    value: unknown
  ): value is AuthorizationFailed {
    return isMappedValueValidForSchema(value, authorizationFailedSchema);
  }

  /**
   * Validation method to narrow down union type to AuthorizationTimedOut type case.
   *
   * This is authorizationTimedOut case.
   */
  export function isAuthorizationTimedOut(
    value: unknown
  ): value is AuthorizationTimedOut {
    return isMappedValueValidForSchema(value, authorizationTimedOutSchema);
  }

  /**
   * Validation method to narrow down union type to SaleRequested type case.
   *
   * This is saleRequested case.
   */
  export function isSaleRequested(value: unknown): value is SaleRequested {
    return isMappedValueValidForSchema(value, saleRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to SaleSucceeded type case.
   *
   * This is saleSucceeded case.
   */
  export function isSaleSucceeded(value: unknown): value is SaleSucceeded {
    return isMappedValueValidForSchema(value, saleSucceededSchema);
  }

  /**
   * Validation method to narrow down union type to SaleRefused type case.
   *
   * This is saleRefused case.
   */
  export function isSaleRefused(value: unknown): value is SaleRefused {
    return isMappedValueValidForSchema(value, saleRefusedSchema);
  }

  /**
   * Validation method to narrow down union type to SaleFailed type case.
   *
   * This is saleFailed case.
   */
  export function isSaleFailed(value: unknown): value is SaleFailed {
    return isMappedValueValidForSchema(value, saleFailedSchema);
  }

  /**
   * Validation method to narrow down union type to SaleTimedOut type case.
   *
   * This is saleTimedOut case.
   */
  export function isSaleTimedOut(value: unknown): value is SaleTimedOut {
    return isMappedValueValidForSchema(value, saleTimedOutSchema);
  }

  /**
   * Validation method to narrow down union type to SettlementRequested type case.
   *
   * This is settlementRequested case.
   */
  export function isSettlementRequested(
    value: unknown
  ): value is SettlementRequested {
    return isMappedValueValidForSchema(value, settlementRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to SettlementRequestSubmitted type case.
   *
   * This is settlementRequestSubmitted case.
   */
  export function isSettlementRequestSubmitted(
    value: unknown
  ): value is SettlementRequestSubmitted {
    return isMappedValueValidForSchema(value, settlementRequestSubmittedSchema);
  }

  /**
   * Validation method to narrow down union type to SettlementFailed type case.
   *
   * This is settlementFailed case.
   */
  export function isSettlementFailed(
    value: unknown
  ): value is SettlementFailed {
    return isMappedValueValidForSchema(value, settlementFailedSchema);
  }

  /**
   * Validation method to narrow down union type to SettlementTimedOut type case.
   *
   * This is settlementTimedOut case.
   */
  export function isSettlementTimedOut(
    value: unknown
  ): value is SettlementTimedOut {
    return isMappedValueValidForSchema(value, settlementTimedOutSchema);
  }

  /**
   * Validation method to narrow down union type to RefundRequested type case.
   *
   * This is refundRequested case.
   */
  export function isRefundRequested(value: unknown): value is RefundRequested {
    return isMappedValueValidForSchema(value, refundRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to RefundRequestSubmitted type case.
   *
   * This is refundRequestSubmitted case.
   */
  export function isRefundRequestSubmitted(
    value: unknown
  ): value is RefundRequestSubmitted {
    return isMappedValueValidForSchema(value, refundRequestSubmittedSchema);
  }

  /**
   * Validation method to narrow down union type to RefundFailed type case.
   *
   * This is refundFailed case.
   */
  export function isRefundFailed(value: unknown): value is RefundFailed {
    return isMappedValueValidForSchema(value, refundFailedSchema);
  }

  /**
   * Validation method to narrow down union type to RefundTimedOut type case.
   *
   * This is refundTimedOut case.
   */
  export function isRefundTimedOut(value: unknown): value is RefundTimedOut {
    return isMappedValueValidForSchema(value, refundTimedOutSchema);
  }

  /**
   * Validation method to narrow down union type to CancellationRequested type case.
   *
   * This is cancellationRequested case.
   */
  export function isCancellationRequested(
    value: unknown
  ): value is CancellationRequested {
    return isMappedValueValidForSchema(value, cancellationRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to CancellationRequestSubmitted type case.
   *
   * This is cancellationRequestSubmitted case.
   */
  export function isCancellationRequestSubmitted(
    value: unknown
  ): value is CancellationRequestSubmitted {
    return isMappedValueValidForSchema(
      value,
      cancellationRequestSubmittedSchema
    );
  }

  /**
   * Validation method to narrow down union type to CancellationFailed type case.
   *
   * This is cancellationFailed case.
   */
  export function isCancellationFailed(
    value: unknown
  ): value is CancellationFailed {
    return isMappedValueValidForSchema(value, cancellationFailedSchema);
  }

  /**
   * Validation method to narrow down union type to CancellationTimedOut type case.
   *
   * This is cancellationTimedOut case.
   */
  export function isCancellationTimedOut(
    value: unknown
  ): value is CancellationTimedOut {
    return isMappedValueValidForSchema(value, cancellationTimedOutSchema);
  }

  /**
   * Validation method to narrow down union type to ReversalRequested type case.
   *
   * This is reversalRequested case.
   */
  export function isReversalRequested(
    value: unknown
  ): value is ReversalRequested {
    return isMappedValueValidForSchema(value, reversalRequestedSchema);
  }

  /**
   * Validation method to narrow down union type to ReversalRequestSubmitted type case.
   *
   * This is reversalRequestSubmitted case.
   */
  export function isReversalRequestSubmitted(
    value: unknown
  ): value is ReversalRequestSubmitted {
    return isMappedValueValidForSchema(value, reversalRequestSubmittedSchema);
  }

  /**
   * Validation method to narrow down union type to ReversalFailed type case.
   *
   * This is reversalFailed case.
   */
  export function isReversalFailed(value: unknown): value is ReversalFailed {
    return isMappedValueValidForSchema(value, reversalFailedSchema);
  }

  /**
   * Validation method to narrow down union type to ReversalTimedOut type case.
   *
   * This is reversalTimedOut case.
   */
  export function isReversalTimedOut(
    value: unknown
  ): value is ReversalTimedOut {
    return isMappedValueValidForSchema(value, reversalTimedOutSchema);
  }
}
