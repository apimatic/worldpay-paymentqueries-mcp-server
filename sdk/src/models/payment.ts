/**
 * Payment QueriesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema.js';
import {
  AuthorizationType1Enum,
  authorizationType1EnumSchema,
} from './authorizationType1Enum.js';
import { Issuer, issuerSchema } from './issuer.js';
import { LastEventEnum, lastEventEnumSchema } from './lastEventEnum.js';
import { Links2, links2Schema } from './links2.js';
import { Narrative1, narrative1Schema } from './narrative1.js';
import {
  PaymentInstrument,
  paymentInstrumentSchema,
} from './paymentInstrument.js';
import { Scheme, schemeSchema } from './scheme.js';
import {
  TransactionType1Enum,
  transactionType1EnumSchema,
} from './transactionType1Enum.js';
import { Value3, value3Schema } from './value3.js';

export interface Payment {
  /** Payment initial authorization time. */
  timestamp?: string;
  /** Unique identifier generated by us for a single payment. Generated at authorization, and maintained through successive payment actions. */
  paymentId?: string;
  /** A unique reference generated by you, used to identify a payment throughout its lifecycle. */
  transactionReference?: string;
  /** An object that contains identification and further details of the merchant. */
  narrative?: Narrative1;
  /** An object that contains transaction type. */
  transactionType?: TransactionType1Enum;
  /** An object that contains authorization type. */
  authorizationType?: AuthorizationType1Enum;
  /** Merchant entity name. */
  entity?: string;
  /** The last event received for the payment */
  lastEvent?: LastEventEnum;
  /** An object containing information returned by the card scheme. */
  scheme?: Scheme;
  /** An object containing information returned by the issuer. */
  issuer?: Issuer;
  /** The payment instrument supplied in the authorization request. */
  paymentInstrument?: PaymentInstrument;
  /** An object that contains payment amount and currency. */
  value?: Value3;
  /** link to retrieveByPaymentId. */
  links?: Links2;
}

export const paymentSchema: Schema<Payment> = object({
  timestamp: ['timestamp', optional(string())],
  paymentId: ['paymentId', optional(string())],
  transactionReference: ['transactionReference', optional(string())],
  narrative: ['narrative', optional(lazy(() => narrative1Schema))],
  transactionType: ['transactionType', optional(transactionType1EnumSchema)],
  authorizationType: [
    'authorizationType',
    optional(authorizationType1EnumSchema),
  ],
  entity: ['entity', optional(string())],
  lastEvent: ['lastEvent', optional(lastEventEnumSchema)],
  scheme: ['scheme', optional(lazy(() => schemeSchema))],
  issuer: ['issuer', optional(lazy(() => issuerSchema))],
  paymentInstrument: [
    'paymentInstrument',
    optional(lazy(() => paymentInstrumentSchema)),
  ],
  value: ['value', optional(lazy(() => value3Schema))],
  links: ['_links', optional(lazy(() => links2Schema))],
});
