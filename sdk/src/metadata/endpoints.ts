/**
 * Payment QueriesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { CoreClient } from '@apimatic/metadata-interfaces';
import { Client } from '../client.js';
import { createConfigurationFromEnvironment } from '../configuration.js';
import { ApiController } from '../controllers/apiController.js';
import { EndpointMetadata, RequestSchema } from './endpointMetadata.js';
import * as apiControllerSchemas from './endpointSchemas/apiControllerSchemas.js';

export const endpoints = {
  'API-queryByDateRange': new EndpointMetadata(
    'queryByDateRange',
    'API',
    new RequestSchema(
      apiControllerSchemas.queryByDateRangeMetadataRequestSchema
    ),
    (client, mapped) =>
      new ApiController(client).queryByDateRange(
        mapped.accept,
        mapped.startDate,
        mapped.endDate,
        mapped.pageSize,
        mapped.currency,
        mapped.minAmount,
        mapped.maxAmount,
        mapped.last4Digits,
        mapped.entityReferences,
        mapped.receivedEvents,
        mapped.transactionReference
      ),
    'Query payments within a specified date time range.\\n\\nThese payments can be filtered by currency, minAmount, maxAmount, last4Digits & receivedEvents.\\n\\nThe API returns data for payments processed after 25 June 2024. For payments processed before then use our [query for historical payments](/products/payment-queries/@v1/query-archive.md).'
  ),
  'API-retrieveByPaymentId': new EndpointMetadata(
    'retrieveByPaymentId',
    'API',
    new RequestSchema(
      apiControllerSchemas.retrieveByPaymentIdMetadataRequestSchema
    ),
    (client, mapped) =>
      new ApiController(client).retrieveByPaymentId(
        mapped.accept,
        mapped.paymentId
      ),
    'Retrieve a single payment by payment ID.\\n\\nThe API returns detailed data for payments processed after 25 June 2024. For payments processed before then use our [query for historical payments](/products/payment-queries/@v1/query-archive.md).'
  ),
  'API-queryArchivedPayments': new EndpointMetadata(
    'queryArchivedPayments',
    'API',
    new RequestSchema(
      apiControllerSchemas.queryArchivedPaymentsMetadataRequestSchema
    ),
    (client, mapped) =>
      new ApiController(client).queryArchivedPayments(
        mapped.accept,
        mapped.transactionReference,
        mapped.entityReference
      ),
    'Query payments processed before 25 June 2024.\\n\\nProvide a `transactionReference` and `entityReference` for a payment to find the matching payment in the archive.'
  ),
} as const;

export function clientFactory(): CoreClient {
  return new Client(createConfigurationFromEnvironment()) as object as CoreClient;
}